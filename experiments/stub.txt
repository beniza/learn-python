## Working with _unicode text_
A lot of programmers, who are learned using python using text in latin/roman will get a real surprise when they start dealing with non-roman scripts. In this section I'll share some of the useful things I've found/learned while working with the Non-Roman script text.
## `utf-8` is your friend
Are you getting an encoding error while trying to work with a unicode file? Try using the encoding as `utf-8`.


Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> def multply(x,y)
    return x * y


SyntaxError: invalid syntax
>>> def mulitply(x,y):
    return x * y

>>> answer = multiply(5,10)
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    answer = multiply(5,10)
NameError: name 'multiply' is not defined
>>> def multiply(x,y):
    return x * y

>>> answer = multiply(5,10)
>>> answer
50
>>> a = 10
>>> def f1()
SyntaxError: invalid syntax
>>> def f1():
	print(a)


>>> def f2():
	print(a)


>>> f1
<function f1 at 0x000002C7E39D0438>
>>> f1()
10
>>> f2()
10
>>> for i in range(51):
	print(i, end=", ")


0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
>>> def new_sum(*args):
	print(args)


>>> new_sum(1,2,3,4,5,6)
(1, 2, 3, 4, 5, 6)
>>> def new_sum(*args):
	print(sum(args))


>>> new_sum(1,2,3,4,5,6)
21
>>> def make_dict(**kwargs):
	#print("\{ '{}:' '{}'
	for key, value in kwargs:
		print("'{}': '{}'".format(key, value))


>>> make_dict(name="Nissy", role="wifie")
Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    make_dict(name="Nissy", role="wifie")
  File "<pyshell#32>", line 3, in make_dict
    for key, value in kwargs:
ValueError: too many values to unpack (expected 2)
>>> def make_dict(**kwargs):
	#print("\{ '{}:' '{}'
	for key, value in kwargs.items():
		print("'{}': '{}'".format(key, value))


>>> make_dict(name="Nissy", role="wifie")
'name': 'Nissy'
'role': 'wifie'
>>> i = 51
>>> while(i<51):
	print(i, end=", ")
	i+=1


>>> i = 0
>>> while(i<51):
	print(i, end=", ")
	i+=1


0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
>>> sum([1,3,5,7])
16
>>> print(sum([x for x in range(51) if x % 6 == 0]))
216
>>>
